@using Bonobo.Git.Server.Extensions
@using MvcCheckBoxList.Model
@model Bonobo.Git.Server.Models.RepositoryDetailModel

@{
    ViewBag.Title = Resources.Repository_Edit_Title;
}

@if (Model == null)
{
    @Html.Partial("~/Views/Shared/_ItemNotFound.cshtml")
}
else
{
    <text>
        <h1>
            @Html.Raw(Model.Logo.Exists ? string.Format("<img src='data:image/png;base64,{0}' class='repo-logo' />", Model.Logo.Base64Image) : "")
            @Model.Name
        </h1>

        @if (ViewBag.UpdateSuccess != null && ViewBag.UpdateSuccess)
        {
            <div class="summary-success">
                <p>@Resources.Repository_Edit_UpdateSuccess</p>
            </div>
        }

        @using (Html.BeginForm("Edit", "Repository", FormMethod.Post, new { @class = "pure-form pure-form-aligned", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(false, Resources.Repository_Edit_Fail)
            @Html.HiddenFor(m => m.Id)

            <fieldset>
                <div class="pure-control-group">
                    @Html.LabelFor(m => m.Name)
                    @Html.TextBoxFor(m => m.Name)
                    @Html.ValidationMessageFor(m => m.Name)
                </div>
                <div class="pure-control-group">
                    @Html.LabelFor(m => m.Group)
                    @Html.TextBoxFor(m => m.Group, new { @class = "medium" })
                </div>
                <div class="pure-control-group">
                    @Html.LabelFor(m => m.Description)
                    @Html.TextAreaFor(m => m.Description, new { @class = "medium" })
                </div>

                <div class="pure-control-group">
                    @Html.LabelFor(m => m.Logo.PostedFile)
                    <input type="file" name="Logo.PostedFile" id="Logo_PostedFile" />
                    <sup>.png, .jpg, .jpeg, .gif</sup>
                </div>

                <div class="pure-control-group">
                    @Html.LabelFor(m => m.Logo.RemoveLogo)
                    @Html.CheckBoxFor(m => m.Logo.RemoveLogo)
                </div>
                <div class="pure-control-group">
                    @Html.LabelFor(m => m.AllowAnonymous)
                    @Html.CheckBoxFor(m => m.AllowAnonymous, new { @onClick = "document.getElementById('AllowAnonymousPush').disabled = !this.checked" })
                    <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousHint"></i>
                </div>

                <div class="pure-control-group">
                    @Html.LabelFor(m => m.AllowAnonymousPush)
                    @{
                        object attribs = new { @id = "AllowAnonymousPush" };
                        if (!Model.AllowAnonymous)
                        {
                            attribs = new { @id = "AllowAnonymousPush", @disabled = "" };
                        }
                    }
                    @Html.EnumDropDownListFor(m => m.AllowAnonymousPush, attribs)
                    <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousPushHint"></i>
                </div>

                @if (AppSettings.IsPushAuditEnabled)
                {
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.AuditPushUser)
                        @Html.CheckBoxFor(m => m.AuditPushUser)
                        <i class="fa fa-info-circle" title="@Resources.Repository_AuditPushUserHint"></i>
                    </div>
                }
                <div class="pure-control-group">
                    @Html.LabelFor(m => m.LinksUseGlobal)
                    @Html.CheckBoxFor(m => m.LinksUseGlobal, new
               {
                   @onClick = "document.getElementById('LinksRegex').disabled = this.checked; " +
"document.getElementById('LinksUrl').disabled =  this.checked; " +
"document.getElementById('LinksRegex').disabled? document.getElementById('LinksRegex').value = '': ''; " +
"document.getElementById('LinksUrl').disabled? document.getElementById('LinksUrl').value = '': '';"
               })
                </div>
                <div class="pure-control-group">
                    @Html.LabelFor(m => m.LinksRegex)
                    @{
                        attribs = new { @class = "medium" };
                        if (Model.LinksUseGlobal)
                        {
                            attribs = new { @class = "medium", disabled = "" };
                        }
                        @Html.TextBoxFor(m => m.LinksRegex, attribs);
                        @Html.ValidationMessageFor(m => m.LinksRegex);
                    }
                </div>
                <div class="pure-control-group">
                    @Html.LabelFor(m => m.LinksUrl)
                    @Html.TextBoxFor(m => m.LinksUrl, attribs)
                    <i class="fa fa-info-circle" title="@Resources.Settings_Global_LinksUrl_Hint"></i>
                </div>
                <div class="pure-control-group checkboxlist">
                    @Html.LabelFor(m => m.Users)
                    <span>
                        @Html.CheckBoxListFor(m => m.PostedSelectedUsers, m => m.AllUsers, m => m.Id, m => m.DisplayName, m => m.Users, Position.Vertical)
                    </span>
                    <i class="fa fa-info-circle" title="@Resources.Repository_UsersHint"></i>
                </div>



                <div class="pure-control-group checkboxlist">
                    @Html.LabelFor(m => m.Administrators)
                    <span>
                        @Html.CheckBoxListFor(m => m.PostedSelectedAdministrators, m => m.AllAdministrators, m => m.Id, m => m.DisplayName, m => m.Administrators, Position.Vertical)
                    </span>
                    <i class="fa fa-info-circle" title="@Resources.Repository_AdministratorsHint"></i>
                    @Html.ValidationMessageFor(m => m.Administrators)
                </div>

                <div class="pure-control-group checkboxlist">
                    @Html.LabelFor(m => m.Teams)
                    <span>
                        @Html.CheckBoxListFor(m => m.PostedSelectedTeams, m => m.AllTeams, mm => mm.Id, mm => mm.DisplayName, mm => mm.Teams, Position.Vertical)
                    </span>
                    <i class="fa fa-info-circle" title="@Resources.Repository_TeamsHint"></i>
                </div>

                @*<div class="sidebar-bordergrid">
                        <label>
                            Dependencies
                        </label>
                        <div>
                            @foreach (Bonobo.Git.Server.Data.Dependency dependency in Model.Dependencies)
                            {
                                <details style="display:inline-block;">
                                    <summary>
                                        <div class="sidebar-text">
                                            <i class="fa fa-chevron-down"></i><input class="removeVisualInput" value="@dependency.ComponentName (@dependency.VersionInUse)" readonly />
                                        </div>
                                    </summary>
                                    <div class="pass-info">
                                        <div class="pure-control-group">
                                            <label>
                                                Date Last Updated
                                            </label>
                                            <div class="sidebar-text">
                                                <input class="removeVisualInput" value="@dependency.DateUpdated" readonly />
                                            </div>
                                        </div>
                                    </div>
                                </details>
                            }
                        </div>
                    </div>*@

            <fieldset class="pure-control-group">
                <legend>
                    @Resources.SA
                </legend>
                <template id="serviceAccountrow">
                    <div class="row service-account-details">
                        <div class=" col pure-control-group" style="display:none;">
                            <label> @Resources.SA_ID </label>
                            <input id="ServiceAccounts[i].Id" name="ServiceAccounts[{i}].Id" readonly disabled />
                        </div>
                        <div class="col pure-control-group">
                            <label> @Resources.SA_Name </label>
                            <input id="ServiceAccounts[i].ServiceAccountName" name="ServiceAccounts[{i}].ServiceAccountName" />
                            <button style="background-color: white; border: none;" type="button"><i style="color:red;" class="fa fa-minus-circle"></i></button>
                        </div>
                        <div class="col pure-control-group">
                            <label> @Resources.SA_InPassManager </label>
                            <input type="checkbox" id="ServiceAccounts[i].InPassManager" name="ServiceAccounts[{i}].InPassManager" />
                        </div>
                        <div class="col pure-control-group">
                            <label> @Resources.SA_PassLastUpdated </label>
                            <input type="datetime" id="ServiceAccounts[i].PassLastUpdated" name="ServiceAccounts[{i}].PassLastUpdated" value="1/1/1900 12:00:00 AM" />
                        </div>
                    </div>
                </template>
                    @*@Html.ActionLink(" ", "Delete", new { id = ServiceAccounts[i].Id }, new { @class = "delete", title = Resources.Grid_Delete }), style: "action"));*@

                    <!--</div>-->
                    @*@{@Model.ServiceAccounts ServiceAccountList = new Model.ServiceAccounts();
                Bonobo.Git.Server.Data.ServiceAccount newServiceAccount = new Bonobo.Git.Server.Data.ServiceAccount();
                newServiceAccountList[0] = newServiceAccount;
            }*@
                    @*var newServiceAccount = new Bonobo.Git.Server.Data.ServiceAccount
            {
                Id = Model.ServiceAccounts.Count,
                ServiceAccountName = "",
                InPassManager = false,
                PassLastUpdated = DateTime.Now
            };
            var newServiceAccounts = Model.ServiceAccounts; /*new Bonobo.Git.Server.Models.RepositoryDetailModel*/
            newServiceAccounts.Clear();
            newServiceAccounts[0] = newServiceAccount;*@





                    @*@Model.ServiceAccounts.Append(newServiceAccount);*@
                    
                

                @if (Model != null)
                {
                    for (int i = 0; i < Model.ServiceAccounts.Count; i++)
                    {

                        <div class="pure-control-group">
                            @Html.LabelFor(m => m.ServiceAccounts[i].ServiceAccountName)
                            @Html.TextBoxFor(m => m.ServiceAccounts[i].ServiceAccountName)
                            @Html.ValidationMessageFor(m => m.ServiceAccounts[i].ServiceAccountName)
                            <button style="background-color: white; border: none;" type="button"><i style="color:red;" class="fa fa-minus-circle"></i></button>
                        </div>
                        <div class="pure-control-group">
                            @Html.LabelFor(m => m.ServiceAccounts[i].InPassManager)
                            @Html.CheckBoxFor(m => m.ServiceAccounts[i].InPassManager)
                            @Html.ValidationMessageFor(m => m.ServiceAccounts[i].InPassManager)
                        </div>
                        <div class="pure-control-group">
                            @Html.LabelFor(m => m.ServiceAccounts[i].PassLastUpdated)
                            @Html.TextBoxFor(m => m.ServiceAccounts[i].PassLastUpdated)
                            @Html.ValidationMessageFor(m => m.ServiceAccounts[i].PassLastUpdated)
                        </div>
                        <div class="pure-control-group" style="display:none;">
                            @Html.LabelFor(m => m.ServiceAccounts[i].Id)
                            @Html.TextBoxFor(m => m.ServiceAccounts[i].Id)
                            @Html.LabelFor(m => m.ServiceAccounts[i].RepositoryId)
                            @Html.TextBoxFor(m => m.ServiceAccounts[i].RepositoryId)
                        </div>
                        
                    }
                    @*<div class="pure-control-group">
                <button href="@Url.Action("AddServiceAccount")" onclick=" newField();" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> Add Service Account </button>
            </div>*@



                }

            </fieldset>

                <div class="pure-control-group">
                    <button type="button" onclick=" newField();" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> @Resources.SA_Add </button>
                </div>
                <fieldset class="pure-control-group" style="padding-top:10px;">
                    <legend>
                        Dependencies
                    </legend>
                    @for (int i = 0; i < Model.Dependencies.Count; i++)
                    {
                        <div class="pure-control-group">
                            @Html.LabelFor(m => m.Dependencies[i].KnownDependency.ComponentName)        @*turn this into a dropdown, need to search all known dependencies in database*@
                            @Html.HiddenFor(m => m.Dependencies[i].KnownDependency.ComponentName)
                            @Html.ValidationMessageFor(m => m.Dependencies[i].KnownDependency.ComponentName)
                            @{
                                var items = (IEnumerable<SelectListItem>)Html.ViewBag.KnownDependencies;         // need to figure out how to save the known dep id within the dependencies table, not the known dep table, and how to change selected value
                                @Html.DropDownListFor(m => m.Dependencies[i].KnownDependenciesId, items@*, new { @selectedValue = Model.Dependencies[i].KnownDependency.Id.ToString() }*@);
                                @*@Html.DropDownList("Repositories", items, Resources.Repository_Go_To_Dropdown, new { @class = "repositories", @onChange = "javascript:location.href=this.options[this.selectedIndex].value;" });*@
                                @*@Html.DropDownList("Component Name", items, Model.Dependencies[i].KnownDependency.ComponentName, new { @class = "componentNames", @onChange = "javascript:Model.Dependencies[i].KnownDependenciesId=this.options[this.selectedIndex].value;" });*@
                            }
                        </div>
                        <div class="pure-control-group">
                            @Html.LabelFor(m => m.Dependencies[i].VersionInUse)
                            @Html.TextBoxFor(m => m.Dependencies[i].VersionInUse)
                            @Html.ValidationMessageFor(m => m.Dependencies[i].VersionInUse)
                        </div>
                        <div class="pure-control-group">
                            @Html.LabelFor(m => m.Dependencies[i].DateUpdated)
                            @Html.TextBoxFor(m => m.Dependencies[i].DateUpdated)
                            @Html.ValidationMessageFor(m => m.Dependencies[i].DateUpdated)
                        </div>

                        <div class="pure-control-group" style="display:none">
                            @Html.HiddenFor(m => m.Dependencies[i].Id);
                            @Html.HiddenFor(m => m.Dependencies[i].RepositoryId);
                            @Html.HiddenFor(m => m.Dependencies[i].KnownDependenciesId);
                        </div>
                    }
                </fieldset>

                    <div class="pure-controls">
                        <a class="pure-button" href="@Url.Action("Tree", new { id = Model.Id, ServiceAccounts = Model.ServiceAccounts })"><i class="fa fa-long-arrow-left"></i> @Resources.Repository_Edit_Back</a>
                        <button type="submit" class="pure-button pure-button-primary save"><i class="fa fa-save"></i> @Resources.Repository_Edit_Submit</button>
                    </div>
                </fieldset>
                <script src="~/scripts/ServiceAccountsEdit.js" asp-append-version="true"></script>
                }
                </text>
            }

