@using Bonobo.Git.Server.Extensions
@using MvcCheckBoxList.Model
@model Bonobo.Git.Server.Models.RepositoryDetailModel

@{
    ViewBag.Title = Resources.Repository_Edit_Title;
}

@if (Model == null)
{
    @Html.Partial("~/Views/Shared/_ItemNotFound.cshtml")
}
else
{
    <text>
        <h1>
            @Html.Raw(Model.Logo.Exists ? string.Format("<img src='data:image/png;base64,{0}' class='repo-logo' />", Model.Logo.Base64Image) : "")
            @Model.Name
        </h1>

        @if (ViewBag.UpdateSuccess != null && ViewBag.UpdateSuccess)
        {
            <div class="summary-success">
                <p>@Resources.Repository_Edit_UpdateSuccess</p>
            </div>
        }

        @using (Html.BeginForm("Edit", "Repository", FormMethod.Post, new { @class = "pure-form pure-form-aligned", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(false, Resources.Repository_Edit_Fail)
            @Html.HiddenFor(m => m.Id)

<fieldset>
    <div class="pure-control-group">
        @Html.LabelFor(m => m.Name)
        @Html.TextBoxFor(m => m.Name)
        @Html.ValidationMessageFor(m => m.Name)
    </div>
    <div class="pure-control-group">
        @Html.LabelFor(m => m.Group)
        @Html.TextBoxFor(m => m.Group, new { @class = "medium" })
    </div>
    <div class="pure-control-group">
        @Html.LabelFor(m => m.Description)
        @Html.TextAreaFor(m => m.Description, new { @class = "medium" })
    </div>

    <div class="pure-control-group">
        @Html.LabelFor(m => m.Logo.PostedFile)
        <input type="file" name="Logo.PostedFile" id="Logo_PostedFile" />
        <sup>.png, .jpg, .jpeg, .gif</sup>
    </div>

    <div class="pure-control-group">
        @Html.LabelFor(m => m.Logo.RemoveLogo)
        @Html.CheckBoxFor(m => m.Logo.RemoveLogo)
    </div>
    <div class="pure-control-group">
        @Html.LabelFor(m => m.AllowAnonymous)
        @Html.CheckBoxFor(m => m.AllowAnonymous, new { @onClick = "document.getElementById('AllowAnonymousPush').disabled = !this.checked" })
        <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousHint"></i>
    </div>

    <div class="pure-control-group">
        @Html.LabelFor(m => m.AllowAnonymousPush)
        @{
            object attribs = new { @id = "AllowAnonymousPush" };
            if (!Model.AllowAnonymous)
            {
                attribs = new { @id = "AllowAnonymousPush", @disabled = "" };
            }
        }
        @Html.EnumDropDownListFor(m => m.AllowAnonymousPush, attribs)
        <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousPushHint"></i>
    </div>

    @if (AppSettings.IsPushAuditEnabled)
    {
        <div class="pure-control-group">
            @Html.LabelFor(m => m.AuditPushUser)
            @Html.CheckBoxFor(m => m.AuditPushUser)
            <i class="fa fa-info-circle" title="@Resources.Repository_AuditPushUserHint"></i>
        </div>
    }

    @if (Model.AreRegexLinksVisible)
    {
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUseGlobal)
            @Html.CheckBoxFor(m => m.LinksUseGlobal, new
       {
           @onClick = "document.getElementById('LinksRegex').disabled = this.checked; " +
 "document.getElementById('LinksUrl').disabled =  this.checked; " +
 "document.getElementById('LinksRegex').disabled? document.getElementById('LinksRegex').value = '': document.getElementById('LinksRegex').value = ''; " +
 "document.getElementById('LinksUrl').disabled? document.getElementById('LinksUrl').value = '': document.getElementById('LinksUrl').value = '';"
       })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksRegex)
            @{
                attribs = new { @class = "medium" };
                if (Model.LinksUseGlobal)
                {
                    attribs = new { @class = "medium", disabled = "" };
                }
                @Html.TextBoxFor(m => m.LinksRegex, attribs);
                @Html.ValidationMessageFor(m => m.LinksRegex);
            }
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUrl)
            @Html.TextBoxFor(m => m.LinksUrl, attribs)
            <i class="fa fa-info-circle" title="@Resources.Settings_Global_LinksUrl_Hint"></i>
        </div>
                }

    <div class="pure-control-group checkboxlist">
        @Html.LabelFor(m => m.Users)
        <span>
            @Html.CheckBoxListFor(m => m.PostedSelectedUsers, m => m.AllUsers, m => m.Id, m => m.DisplayName, m => m.Users, Position.Vertical)
        </span>
        <i class="fa fa-info-circle" title="@Resources.Repository_UsersHint"></i>
    </div>

    <div class="pure-control-group checkboxlist">
        @Html.LabelFor(m => m.Administrators)
        <span>
            @Html.CheckBoxListFor(m => m.PostedSelectedAdministrators, m => m.AllAdministrators, m => m.Id, m => m.DisplayName, m => m.Administrators, Position.Vertical)
        </span>
        <i class="fa fa-info-circle" title="@Resources.Repository_AdministratorsHint"></i>
        @Html.ValidationMessageFor(m => m.Administrators)
    </div>

    <div class="pure-control-group checkboxlist">
        @Html.LabelFor(m => m.Teams)
        <span>
            @Html.CheckBoxListFor(m => m.PostedSelectedTeams, m => m.AllTeams, mm => mm.Id, mm => mm.DisplayName, mm => mm.Teams, Position.Vertical)
        </span>
        <i class="fa fa-info-circle" title="@Resources.Repository_TeamsHint"></i>
    </div>

    <fieldset class="pure-control-group">
        <legend class="add-some-padding">
            @Resources.ServiceAccount
        </legend>
       
        @if (Model != null)
        {   <table class="pure-table pure-control-group" id="service-account-table">
        <tr>
            <th class="header-name">@Resources.ServiceAccount_Name</th>
            <th class="header-field-2">@Resources.ServiceAccount_PassLastUpdated</th>
            <th>@Resources.ServiceAccount_InPassManager</th>
        </tr>     
    @for (int i = 0; i < Model.ServiceAccounts.Count; i++)
    {
        var id = "ServiceAccounts_" + i;
        var btnId = "ServiceAccountBtn_" + i;
        <tr class="row service-account-details" id="@id">
            <th class=" col pure-control-group">
                @Html.TextBoxFor(m => m.ServiceAccounts[i].ServiceAccountName, htmlAttributes: new { @style = "width: 250px;" })
                @Html.ValidationMessageFor(m => m.ServiceAccounts[i].ServiceAccountName)
            </th>
            <th class="col pure-control-group left30">
                @{var serviceAccountId = "ServiceAccounts_" + i + "__.PassLastUpdated";
                    if (Model.ServiceAccounts[i].PassLastUpdated != null)
                    {
                        var dateValue = Model.ServiceAccounts[i].PassLastUpdated.ToString().Split('/');
                        var formattedDate = dateValue[2].Substring(0, 4) + "-" + (dateValue[0].Length == 1 ? "0" + dateValue[0] : dateValue[0]) + "-" + (dateValue[1].Length == 1 ? "0" + dateValue[1] : dateValue[1]);
                        <input class="form-control" type="date" id="@serviceAccountId" name="ServiceAccounts[@i].PassLastUpdated" value="@formattedDate" onfocus="console.log(this.value)" />
                    }
                    else
                    {
                        <input class="form-control" type="date" id="@serviceAccountId" name="ServiceAccounts[@i].PassLastUpdated" onfocus="console.log(this.value)" />
                    }
                }
                @Html.ValidationMessageFor(m => m.ServiceAccounts[i].PassLastUpdated)
            </th>
            <th class="col pure-control-group">
                @Html.CheckBoxFor(m => m.ServiceAccounts[i].InPassManager)
                @Html.ValidationMessageFor(m => m.ServiceAccounts[i].InPassManager)
            </th>
            <th>
                <button type="button" onclick=" removeServiceAccount(this.id);" id="@btnId" title="Remove Service Account" class="rem-btn"><i class="fa fa-minus-circle"></i></button>
            </th>
            <th class="col pure-control-group hidden">
                @Html.LabelFor(m => m.ServiceAccounts[i].Id)
                @Html.TextBoxFor(m => m.ServiceAccounts[i].Id)
                @Html.LabelFor(m => m.ServiceAccounts[i].RepositoryId)
                @Html.TextBoxFor(m => m.ServiceAccounts[i].RepositoryId)
            </th>
        </tr>
                    }
</table>
                    }

    </fieldset>

    <div class="pure-control-group">
        <button type="button" onclick=" createServiceAccount(@Model.ServiceAccounts.Count);" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> @Resources.ServiceAccount_Add </button>
    </div>
    <fieldset class="pure-control-group add-little-padding">
        <legend class="add-some-padding">
            @Resources.Dependencies
        </legend>

        <template id="Dependencyrow">
            <tr class="row Dependencies-details" id="Dependencies_{i}" name="Dependencies-details">
                <th class=" col pure-control-group hidden">
                    <label> @Resources.Dependencies_ID </label>
                    <input class="form-control" id="Dependencies[{i}].Id" name="Dependencies[{i}].Id" readonly disabled />
                </th>
                <th class="pure-control-group">
                    <div class="hidden"> <input class="field-width" id="Dependencies_{i}__KnownDependency_ComponentName" name="Dependencies[{i}].KnownDependency.ComponentName" type="text"></div>
                    <span class="field-validation-valid" data-valmsg-for="Dependencies[{i}].KnownDependency.ComponentName" data-valmsg-replace="true"></span>
                    <select class="dropDownKD valid field-width" data-val="true" data-val-required="The KnownDependenciesId field is required." id="Dependencies_{i}__KnownDependenciesId" name="Dependencies[{i}].KnownDependenciesId" onchange="javascript: DisplayComponentNameNewInputField(this.id)" aria-required="true" aria-invalid="false">
                        @{
                            var dependencies = Model.Dependencies; //existing KD in repo
                            if (Model.KnownDependencies != null)
                            {
                                <option></option>
                                //display first empty
                                //create a dict using the var depen.
                                //don't need dictionary, could use array or list cuase just keeping track of id
                                //delete line of code in populate checkboxlistdata, fix error when two items with same key are added, add none?, not sure
                                Dictionary<string, string> DependenciesDictionary = new Dictionary<string, string>();
                                if (Model.Dependencies != null)
                                {
                                    foreach (var Dependency in Model.Dependencies) //existing repo
                                    {
                                        DependenciesDictionary.Add(Dependency.KnownDependenciesId.ToString(), Dependency.KnownDependenciesId.ToString());
                                    }
                                }
                                foreach (var knownDependency in Model.KnownDependencies) //all pre-existing
                                {
                                    if (DependenciesDictionary.ContainsKey(knownDependency.Id.ToString()))
                                    {
                                        <option disabled value="@knownDependency.Id.ToString()">@knownDependency.ComponentName</option>
                                    }
                                    else
                                    {
                                        <option value="@knownDependency.Id.ToString()">@knownDependency.ComponentName</option>
                                    }
                                }
                            }
                        }
                    </select>
                    <div class="pure-control-group new-known-dependency" id="newKD-Dependencies_{i}__KnownDependenciesId">
                        <input class="pure-form valid field-width" id="KDInputDependencies_{i}__KnownDependenciesId" type="text">
                        <button class="return-to-dropdown" type="button" id="{i}" onclick="returnToDropdownFromKDInput(this.id)" title="Return to dropdown" style="background-color: white; border: none;"><i style="color:black;" class="fa fa-arrow-left"></i></button>
                    </div>
                </th>
                <th class="col pure-control-group">
                    <input class="form-control" id="Dependencies_{i}__.VersionInUse" name="Dependencies[{i}].VersionInUse" />
                    <span class="field-validation-valid text-danger"
                          data-valmsg-for="Dependencies[{i}].VersionInUse"
                          data-valmsg-replace="true">
                    </span>
                </th>
                <th class="col pure-control-group">
                    <input class="form-control" type="date" id="Dependencies_{i}__.DateUpdated" name="Dependencies[{i}].DateUpdated"/>
                    <span class="field-validation-valid text-danger"
                          data-valmsg-for="Dependencies[{i}].DateUpdated"
                          data-valmsg-replace="true">
                    </span>
                </th>
                <th>
                    <button class="rem-btn" type="button" onclick="removeDependency(this.id);" id=" DependenciesBtn_{i}" title="Remove Dependency"><i class="fa fa-minus-circle"></i></button>
                </th>
            </tr>
        </template>


        <table class="pure-table pure-control-group bottom" id="dependencies-table">
            <tr>
                <th class="header-name">@Resources.Account_Create_Name</th>
                <th class="header-field-2">@Resources.Dependencies_VersionInUse</th>
                <th>@Resources.Dependencies_DateUpdated</th>
            </tr>
            @if (Model.Dependencies != null && Model.Dependencies.Count > 0)
            {
                for (int i = 0; i < Model.Dependencies.Count; i++)
                {
                    <tr class="row Dependencies-details" id="Dependencies_@i" name="Dependencies-details">
                        <th class="pure-control-group">
                            <div class="hidden"> @Html.TextBoxFor(m => m.Dependencies[i].KnownDependency.ComponentName, htmlAttributes: new { @class = "field-width" })</div>
                            @Html.ValidationMessageFor(m => m.Dependencies[i].KnownDependency.ComponentName)
                            @{
                                var knownDependenciesList = new SelectList(Model.KnownDependencies, "Id", "ComponentName", Model.Dependencies[i].KnownDependenciesId);

                                @Html.DropDownListFor(m => m.Dependencies[i].KnownDependenciesId, knownDependenciesList, new
                                {
                                    @class = "dropDownKD field-width",
                                    @disabled = "disabled",
                                    @style = "color: #6B6B6B;",
                                    @onChange = "javascript: DisplayComponentNameNewInputField(this.id)"
                                });
                                var DepenId = Model.Dependencies[i].Id;
                            }
                        <th class="pure-control-group">
                            @Html.TextBoxFor(m => m.Dependencies[i].VersionInUse)
                            @Html.ValidationMessageFor(m => m.Dependencies[i].VersionInUse)
                        </th>
                        <th class="pure-control-group">
                            @{
                                var dependencyId = "Dependencies_" + i + "__.DateUpdated";
                                if (Model.Dependencies[i].DateUpdated != null)
                                {
                                    var dateValue = Model.Dependencies[i].DateUpdated.ToString().Split('/');
                                    var formattedDate = dateValue[2].Substring(0, 4) + "-" + (dateValue[0].Length == 1 ? "0" + dateValue[0] : dateValue[0]) + "-" + (dateValue[1].Length == 1 ? "0" + dateValue[1] : dateValue[1]);
                                    <input class="form-control" type="date" id="@dependencyId" name="Dependencies[@i].DateUpdated" value="@formattedDate" />
                                }
                                else
                                {
                                    <input class="form-control" type="date" id="@dependencyId" name="Dependencies[@i].DateUpdated" />
                                }
                            }

                            @Html.ValidationMessageFor(m => m.Dependencies[i].DateUpdated)
                        </th>
                        <th>
                            <button type="button" onclick="removeDependency(this.id);" id=" DependenciesBtn_@i" title="Remove Dependency" class="rem-btn"><i class="fa fa-minus-circle"></i></button>
                        </th>
                        <th class="pure-control-group hidden">
                            @Html.HiddenFor(m => m.Dependencies[i].Id);
                            @Html.HiddenFor(m => m.Dependencies[i].RepositoryId);
                            @Html.HiddenFor(m => m.Dependencies[i].KnownDependenciesId);
                        </th>
                    </tr>
                }
            }
        </table>
    </fieldset>

    <div class="pure-control-group">
        <button type="button" onclick="createDependency(@(Model.Dependencies != null? Model.Dependencies.Count: 0));" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> @Resources.Dependencies_Add </button>
    </div>
    <div class="pure-controls">
        <a class="pure-button" href="@Url.Action("Tree", new { id = Model.Id, ServiceAccounts = Model.ServiceAccounts, Dependencies = Model.Dependencies })"><i class="fa fa-long-arrow-left"></i> @Resources.Repository_Edit_Back</a>
        <button type="submit" class="pure-button pure-button-primary save"><i class="fa fa-save"></i> @Resources.Repository_Edit_Submit</button>
    </div>
</fieldset>

        }
    </text>
}
<script src="~/scripts/ServiceAccountsEdit.js"></script>
<script src="~/scripts/DependenciesEdit.js"></script>


