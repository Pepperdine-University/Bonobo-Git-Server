@using Bonobo.Git.Server.Extensions
@using MvcCheckBoxList.Model
@model Bonobo.Git.Server.Models.RepositoryDetailModel
@{
    ViewBag.Title = Resources.Repository_Create_Title;
}
<h1>@Resources.Repository_Create_Title</h1>

@using (Html.BeginForm("Create", "Repository", FormMethod.Post, new { @class = "pure-form pure-form-aligned", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false, Resources.Repository_Create_Fail)

    <fieldset>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, new { autofocus = "" })<em>*</em>
            @Html.ValidationMessageFor(m => m.Name)
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Group)
            @Html.TextBoxFor(m => m.Group, new { @class = "medium" })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Description)
            @Html.TextAreaFor(m => m.Description, new { @class = "medium" })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Logo.PostedFile)
            <input type="file" name="Logo.PostedFile" id="Logo_PostedFile" />
            <sup>.png, .jpg, .jpeg, .gif</sup>
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.AllowAnonymous)
            @Html.CheckBoxFor(m => m.AllowAnonymous, new { @onClick = "document.getElementById('AllowAnonymousPush').disabled = !this.checked" })
            <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousHint"></i>
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.AllowAnonymousPush)
            @{
                object attribs = new { @id = "AllowAnonymousPush" };
                if (!Model.AllowAnonymous)
                {
                    attribs = new { @id = "AllowAnonymousPush", @disabled = "" };
                }
            }
            @Html.EnumDropDownListFor(m => m.AllowAnonymousPush, attribs)
            <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousPushHint"></i>
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUseGlobal)
            @Html.CheckBoxFor(m => m.LinksUseGlobal, new { @onClick = "document.getElementById('LinksRegex').disabled = this.checked; document.getElementById('LinksUrl').disabled = this.checked" })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksRegex)
            @{
                attribs = new { @class = "medium" };
                if (Model.LinksUseGlobal)
                {
                    attribs = new { @class = "medium", disabled = "" };
                }
                @Html.TextBoxFor(m => m.LinksRegex, attribs);
                @Html.ValidationMessageFor(m => m.LinksRegex);
            }
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUrl)
            @Html.TextBoxFor(m => m.LinksUrl, attribs)
            <i class="fa fa-info-circle" title="@Resources.Settings_Global_LinksUrl_Hint"></i>
        </div>
        <div class="pure-control-group checkboxlist">
            @Html.LabelFor(m => m.Users)
            <span>
                @Html.CheckBoxListFor(m => m.PostedSelectedUsers, mm => mm.AllUsers, mm => mm.Id, mm => mm.DisplayName, mm => mm.Users, Position.Vertical)
            </span>
            <i class="fa fa-info-circle" title="@Resources.Repository_UsersHint"></i>
        </div>

        <div class="pure-control-group checkboxlist">
            @Html.LabelFor(m => m.Administrators)
            <span>
                @Html.CheckBoxListFor(m => m.PostedSelectedAdministrators, mm => mm.AllAdministrators, mm => mm.Id, mm => mm.DisplayName, mm => mm.Administrators, Position.Vertical)
            </span>
            @Html.ValidationMessageFor(m => m.Administrators)
            <i class="fa fa-info-circle" title="@Resources.Repository_AdministratorsHint"></i>
        </div>

        <div class="pure-control-group checkboxlist">
            @Html.LabelFor(m => m.Teams)
            <span>
                @Html.CheckBoxListFor(m => m.PostedSelectedTeams, mm => mm.AllTeams, mm => mm.Id, mm => mm.DisplayName, mm => mm.Teams, Position.Vertical)
            </span>
            <i class="fa fa-info-circle" title="@Resources.Repository_TeamsHint"></i>
        </div>

    <fieldset class="pure-control-group">
        <legend>
            @Resources.SA
        </legend>
        <table class="pure-table" id="service-account-table">
            <tr class="row">
                <th class="col">@Resources.SA_Name</th>
                <th class="col">@Resources.SA_PassLastUpdated</th>
                <th class="col">@Resources.SA_InPassManager</th>
            </tr>
        </table>
</fieldset>
    <div class="pure-control-group">
        <button type="button" onclick=" newField();" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> @Resources.SA_Add </button>
    </div>
    <fieldset class="pure-control-group" style="padding-top:10px;">
        <legend>
            @Resources.Dependencies
        </legend>
            <table class="pure-table" id="dependencies-table">
                <tr>
                    <th>@Resources.Account_Create_Name</th>
                    <th>@Resources.Dependencies_VersionInUse</th>
                    <th>@Resources.Dependencies_DateUpdated</th>
                </tr>
            </table>
            <template id="Dependencyrow">
                <tr class="row Dependencies-details" id="Dependencies_{i}" name="Dependencies-details">
                    <th class=" col pure-control-group" style="display:none;">
                        <label> @Resources.Dependencies_ID </label>
                        <input class="form-control" id="Dependencies[{i}].Id" name="Dependencies[{i}].Id" readonly disabled />
                    </th>
                    <th class="pure-control-group">
                        <div style="display:none;"> <input id="Dependencies_{i}__KnownDependency_ComponentName" name="Dependencies[{i}].KnownDependency.ComponentName" type="text" style="width: 250px;"></div>
                        <span class="field-validation-valid" data-valmsg-for="Dependencies[{i}].KnownDependency.ComponentName" data-valmsg-replace="true"></span>
                        <select class="dropDownKD valid" data-val="true" data-val-required="The KnownDependenciesId field is required." id="Dependencies_{i}__KnownDependenciesId" name="Dependencies[{i}].KnownDependenciesId" onchange="javascript: DisplayComponentNameNewInputField(this.id)" style="width: 250px" aria-required="true" aria-invalid="false">
                            @{
                                if (Model.KnownDependencies != null)
                                {
                                    <option></option>
                                    foreach (var knownDependency in Model.KnownDependencies)
                                    {
                                        <option value="@knownDependency.Id.ToString()">@knownDependency.ComponentName</option>
                                    }
                                }
                            }
                        </select>
                        <div class="pure-control-group new-known-dependency" id="newKD-Dependencies_{i}__KnownDependenciesId">
                            <input class="pure-form valid" id="KDInputDependencies_{i}__KnownDependenciesId" type="text" onfocusout="checkIfKDExists(this.id)" style="width:250px;">
                            <button class="return-to-dropdown" type="button" id="{i}" onclick="returnToDropdownFromKDInput(this.id)" title="Return to Dropdown" style="background-color: white; border: none;"><i style="color:red;" class="fa fa-times-circle"></i></button>
                        </div>
                    </th>
                    <th class="col pure-control-group">
                        <input class="form-control" id="Dependencies_{i}__.VersionInUse" name="Dependencies[{i}].VersionInUse" />
                        <span class="field-validation-valid text-danger"
                              data-valmsg-for="Dependencies[{i}].VersionInUse"
                              data-valmsg-replace="true">
                        </span>

                    </th>
                    <th class="col pure-control-group">
                        <input class="form-control" type="date" id="Dependencies_{i}__.DateUpdated" name="Dependencies[{i}].DateUpdated" value="1/1/1900" />
                        <span class="field-validation-valid text-danger"
                              data-valmsg-for="Dependencies[{i}].DateUpdated"
                              data-valmsg-replace="true">
                        </span>
                        <th />
                    <th>
                        <button type="button" onclick="DepenremField(this.id);" id=" DependenciesBtn_{i}" title="Remove Dependency" style="background-color: white; border: none;"><i style="color:red;" class="fa fa-minus-circle"></i></button>
                    </th>
                </tr>
            </template>
    </fieldset>
        <div class="pure-control-group">
            <button type="button" onclick="DepennewField(0);" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> @Resources.Dependencies_Add </button>
        </div>
       
        <div class="pure-controls">
            <a class="pure-button" href="@Url.Action("Index")"><i class="fa fa-long-arrow-left"></i> @Resources.Repository_Back</a>
            <button type="submit" class="pure-button pure-button-primary"><i class="fa fa-save"></i> @Resources.Repository_Create_Submit</button>
        </div>
    </fieldset>
<script src="~/scripts/ServiceAccountsEdit.js" asp-append-version="true"></script>
<script src="~/scripts/DependenciesEdit.js" asp-append-version="true"></script>
<script>
    function DisplayComponentNameNewInputField(dropDownID) {
        inputField = document.getElementById("KDInput" + dropDownID);
        dropDown = document.getElementById(dropDownID);
        selectedValue = dropDown[dropDown.selectedIndex].text;
        if (selectedValue == "Add New...") {
            console.log("Drop down id = ", dropDownID);
            $("#newKD-" + dropDownID).css("display", "inline-block");
            $("#" + dropDownID).css("display", "none");
            changeNameOfInput(inputField, dropDown, 1);
        } else {
            $("#newKD-" + dropDownID).css("display", "none");
            changeNameOfInput(inputField, dropDown, 0);
        }
    }

    function checkIfKDExists(inputID) {
        var inputField = document.getElementById(inputID);
        var newKDName = inputField.value;
        var dropDown = document.getElementById(inputID.slice(7));
        var exists = 0;
        for (j = 0; j < dropDown.options.length; j++) {
            if (newKDName == dropDown.options[j].text) {
                exists = 1;
                break;
            }
        }
        if (newKDName == "") {
            //alert("The new component name cannot be blank");
        } else if (exists == 1) {
            //if (window.confirm("the component name entered already exists")) {
            //    document.getElementById(inputID).focus();
            //} else {
            //    document.getElementById(inputID).focus();
            //}
            //window.confirm("the component name entered already exists");
            alert("the component name entered already exists");
            //if (!alert("the component name entered already exists")) {
            //    document.getElementById(inputID).focus();
            //}
        } else {
            //changeNameOfInput(inputField, dropDown, 1);
            //addKDtoDropDown(i, newKDName, dropDown);
        }
    }

    function returnToDropdownFromKDInput(i) {
        dropDownID = "Dependencies_" + i + "__KnownDependenciesId";
        $("#" + dropDownID).css("display", "inline-block");
        $("#newKD-" + dropDownID).css("display", "none");

        document.getElementById("KDInput" + dropDownID).value = "";
        document.getElementById(dropDownID).selectedIndex = 0;
    }

    function changeNameOfInput(inputField, dropDown, addNewSelected) {
        if (addNewSelected) {
            inputField.setAttribute("name", dropDown.name);
            dropDown.setAttribute("name", "");
        } else if (dropDown.name == "") {
            dropDown.setAttribute("name", inputField.name);
            inputField.setAttribute("name", "");
        }
    }
</script>
}
