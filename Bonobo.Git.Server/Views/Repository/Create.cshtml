@using Bonobo.Git.Server.Extensions
@using MvcCheckBoxList.Model
@model Bonobo.Git.Server.Models.RepositoryDetailModel
@{
    ViewBag.Title = Resources.Repository_Create_Title;
}

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
<script src="~/scripts/ServiceAccountsEdit.js"></script>
<script src="~/scripts/DependenciesEdit.js"></script>

<h1>@Resources.Repository_Create_Title</h1>

@using (Html.BeginForm("Create", "Repository", FormMethod.Post, new { @class = "pure-form pure-form-aligned", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false, Resources.Repository_Create_Fail)

    <fieldset>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, new { autofocus = "" })<em>*</em>
            @Html.ValidationMessageFor(m => m.Name)
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Group)
            @Html.TextBoxFor(m => m.Group, new { @class = "medium" })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Description)
            @Html.TextAreaFor(m => m.Description, new { @class = "medium" })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Logo.PostedFile)
            <input type="file" name="Logo.PostedFile" id="Logo_PostedFile" />
            <sup>.png, .jpg, .jpeg, .gif</sup>
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.AllowAnonymous)
            @Html.CheckBoxFor(m => m.AllowAnonymous, new { @onClick = "document.getElementById('AllowAnonymousPush').disabled = !this.checked" })
            <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousHint"></i>
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.AllowAnonymousPush)
            @{
                object attribs = new { @id = "AllowAnonymousPush" };
                if (!Model.AllowAnonymous)
                {
                    attribs = new { @id = "AllowAnonymousPush", @disabled = "" };
                }
            }
            @Html.EnumDropDownListFor(m => m.AllowAnonymousPush, attribs)
            <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousPushHint"></i>
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUseGlobal)
            @Html.CheckBoxFor(m => m.LinksUseGlobal, new
            {
                @onClick = "document.getElementById('LinksRegex').disabled = this.checked; " +
                           "document.getElementById('LinksUrl').disabled =  this.checked; " +
                           "document.getElementById('LinksRegex').disabled? document.getElementById('LinksRegex').value = '': document.getElementById('LinksRegex').value = ''; " +
                           "document.getElementById('LinksUrl').disabled? document.getElementById('LinksUrl').value = '': document.getElementById('LinksUrl').value = '';"
            })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksRegex)
            @{
                attribs = new { @class = "medium" };
                if (Model.LinksUseGlobal)
                {
                    attribs = new { @class = "medium", disabled = "" };
                }
                @Html.TextBoxFor(m => m.LinksRegex, attribs);
                @Html.ValidationMessageFor(m => m.LinksRegex);
            }
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUrl)
            @Html.TextBoxFor(m => m.LinksUrl, attribs)
            <i class="fa fa-info-circle" title="@Resources.Settings_Global_LinksUrl_Hint"></i>
        </div>
        <div class="pure-control-group checkboxlist">
            @Html.LabelFor(m => m.Users)
            <span>
                @Html.CheckBoxListFor(m => m.PostedSelectedUsers, mm => mm.AllUsers, mm => mm.Id, mm => mm.DisplayName, mm => mm.Users, Position.Vertical)
            </span>
            <i class="fa fa-info-circle" title="@Resources.Repository_UsersHint"></i>
        </div>

        <div class="pure-control-group checkboxlist">
            @Html.LabelFor(m => m.Administrators)
            <span>
                @Html.CheckBoxListFor(m => m.PostedSelectedAdministrators, mm => mm.AllAdministrators, mm => mm.Id, mm => mm.DisplayName, mm => mm.Administrators, Position.Vertical)
            </span>
            @Html.ValidationMessageFor(m => m.Administrators)
            <i class="fa fa-info-circle" title="@Resources.Repository_AdministratorsHint"></i>
        </div>

        <div class="pure-control-group checkboxlist">
            @Html.LabelFor(m => m.Teams)
            <span>
                @Html.CheckBoxListFor(m => m.PostedSelectedTeams, mm => mm.AllTeams, mm => mm.Id, mm => mm.DisplayName, mm => mm.Teams, Position.Vertical)
            </span>
            <i class="fa fa-info-circle" title="@Resources.Repository_TeamsHint"></i>
        </div>

        <fieldset class="pure-control-group">
            <legend>
                @Html.LabelFor(m => m.ServiceAccounts)
            </legend>
            <table class="pure-table" id="service-account-table">
                <tr class="row">
                    <th class="col header-name">@Resources.ServiceAccount_Name</th>
                    <th class="col header-field-2">@Resources.ServiceAccount_PassLastUpdated</th>
                    <th class="col">@Resources.ServiceAccount_InPassManager</th>
                </tr>
                @if (Model.ServiceAccounts != null && Model.ServiceAccounts.Count > 0)
                {
                    for (int i = 0; i < Model.ServiceAccounts.Count; i++)
                    {
                        var id = "ServiceAccounts_" + i;
                        var btnId = "ServiceAccountBtn_" + i;
                        <tr class="row service-account-details" id="@id">
                            <th class=" col pure-control-group">
                                @Html.TextBoxFor(m => m.ServiceAccounts[i].ServiceAccountName, htmlAttributes: new { @style = "width: 250px;" })
                                @Html.ValidationMessageFor(m => m.ServiceAccounts[i].ServiceAccountName)
                            </th>
                            <th class="col pure-control-group left30">
                                @{var serviceAccountId = "ServiceAccounts_" + i + "__.PassLastUpdated";
                                    if (Model.ServiceAccounts[i].PassLastUpdated != null)
                                    {
                                        var dateValue = Model.ServiceAccounts[i].PassLastUpdated.ToString().Split('/');
                                        var formattedDate = dateValue[2].Substring(0, 4) + "-" + (dateValue[0].Length == 1 ? "0" + dateValue[0] : dateValue[0]) + "-" + (dateValue[1].Length == 1 ? "0" + dateValue[1] : dateValue[1]);
                                        <input class="form-control" type="date" id="@serviceAccountId" name="ServiceAccounts[@i].PassLastUpdated" value="@formattedDate" onfocus="console.log(this.value)" />
                                    }
                                    else
                                    {
                                        <input class="form-control" type="date" id="@serviceAccountId" name="ServiceAccounts[@i].PassLastUpdated" onfocus="console.log(this.value)" />
                                    }
                                }
                                @Html.ValidationMessageFor(m => m.ServiceAccounts[i].PassLastUpdated)
                            </th>
                            <th class="col pure-control-group">
                                @Html.CheckBoxFor(m => m.ServiceAccounts[i].InPassManager)
                                @Html.ValidationMessageFor(m => m.ServiceAccounts[i].InPassManager)
                            </th>
                            <th>
                                <button type="button" onclick=" removeServiceAccount(this.id);" id="@btnId" title="Remove Service Account" class="rem-btn"><i class="fa fa-minus-circle"></i></button>
                            </th>
                            <th class="col pure-control-group hidden">
                                @Html.LabelFor(m => m.ServiceAccounts[i].Id)
                                @Html.TextBoxFor(m => m.ServiceAccounts[i].Id)
                                @Html.LabelFor(m => m.ServiceAccounts[i].RepositoryId)
                                @Html.TextBoxFor(m => m.ServiceAccounts[i].RepositoryId)
                            </th>
                        </tr>
                    }
                }
            </table>
        </fieldset>
        <div class="pure-control-group">
            <button type="button" onclick=" createServiceAccount();" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> @Resources.ServiceAccount_Add </button>
        </div>
        <fieldset class="pure-control-group add-little-padding">
            <legend>
                @Html.LabelFor(m => m.Dependencies)
            </legend>
            @{
                List<string> ExistingDependenciesList = new List<string>();
                var dependencies = Model.Dependencies;
                if (Model.Dependencies != null)
                {
                    foreach (var dependency in Model.Dependencies)
                    {
                        if (dependency.Id != Guid.Empty)
                        {
                            ExistingDependenciesList.Add(dependency.KnownDependenciesId.ToString());
                        }
                    }
                }
            }
            <template id="Dependencyrow">
                <tr class="row Dependencies-details" id="Dependencies_{i}" name="Dependencies-details">
                    <th class=" col pure-control-group hidden">
                        <label> @Resources.Dependencies_ID </label>
                        <input class="form-control" id="Dependencies[{i}].Id" name="Dependencies[{i}].Id" readonly disabled />
                    </th>
                    <th class="pure-control-group">
                        <span class="field-validation-valid" data-valmsg-for="Dependencies[{i}].KnownDependency.ComponentName" data-valmsg-replace="true"></span>
                        <select class="dropDownKD valid field-width" data-val="true" data-val-required="The KnownDependenciesId field is required." id="Dependencies_{i}__KnownDependenciesId" name="Dependencies[{i}].KnownDependenciesId" onchange="javascript: DisplayComponentNameNewInputField(this.id)" aria-required="true" aria-invalid="false">
                            @{
                                if (Model.KnownDependencies != null)
                                {
                                    <option></option>
                                    foreach (var knownDependency in Model.KnownDependencies)
                                    {
                                        <option value="@knownDependency.Id.ToString()">@knownDependency.ComponentName</option>
                                    }
                                }
                            }
                        </select>
                        <div id="divNewKnownDependency_{i}" class="new-known-dependency-container">
                            <div class="pure-control-group new-known-dependency">
                                <input class="pure-form valid field-width" id="Dependencies_{i}__KnownDependency_ComponentName" name="Dependencies[{i}].KnownDependency.ComponentName" type="text">
                                <button class="return-to-dropdown" type="button" id="{i}" onclick="returnToDropdownFromKDInput(this.id)" title="Return to dropdown" style="background-color: white; border: none;"><i class="fa fa-arrow-left"></i></button>
                            </div>
                        </div>
                    </th>
                    <th class="col pure-control-group">
                        <input class="form-control" id="Dependencies_{i}__.VersionInUse" name="Dependencies[{i}].VersionInUse" />
                        <span class="field-validation-valid text-danger"
                              data-valmsg-for="Dependencies[{i}].VersionInUse"
                              data-valmsg-replace="true">
                        </span>

                    </th>
                    <th class="col pure-control-group">
                        <input class="form-control" type="date" id="Dependencies_{i}__.DateUpdated" name="Dependencies[{i}].DateUpdated" value="1/1/1900" />
                        <span class="field-validation-valid text-danger"
                              data-valmsg-for="Dependencies[{i}].DateUpdated"
                              data-valmsg-replace="true">
                        </span>
                    <th />
                    <th>
                        <button type="button" onclick="removeDependency(this.id);" id=" DependenciesBtn_{i}" title="Remove Dependency" class="rem-btn"><i class="fa fa-minus-circle"></i></button>
                    </th>
                </tr>
            </template>

            <table class="pure-table pure-control-group bottom" id="dependencies-table">
                <tr>
                    <th class="header-name">@Resources.Account_Create_Name</th>
                    <th class="header-field-2">@Resources.Dependencies_VersionInUse</th>
                    <th>@Resources.Dependencies_DateUpdated</th>
                </tr>
                @if (Model.Dependencies != null && Model.Dependencies.Count > 0)
                {
                    for (int i = 0; i < Model.Dependencies.Count; i++)
                    {
                        <tr class="row Dependencies-details" id="Dependencies_@i" name="Dependencies-details">
                            <th class="pure-control-group">
                                @{
                                    object attributes;
                                    List<SelectListItem> knownDependenciesList = new List<SelectListItem>();
                                    foreach (var knownDependency in Model.KnownDependencies)
                                    {
                                        var knownDependencyItem = new SelectListItem { Value = knownDependency.Id.ToString(), Text = knownDependency.ComponentName };
                                        if (knownDependency.Id == Model.Dependencies[i].KnownDependenciesId)
                                        {
                                            knownDependencyItem.Selected = true;
                                        }
                                        if (ExistingDependenciesList.Contains(knownDependency.Id.ToString()))
                                        {
                                            knownDependencyItem.Disabled = true;
                                        }
                                        knownDependenciesList.Add(knownDependencyItem);
                                    }
                                    if (Model.Dependencies[i].Id == Guid.Empty)
                                    {
                                        attributes = new
                                        {
                                            @class = "dropDownKD field-width",
                                            @style = "width: 250px; color: black;",
                                            @onChange = "javascript: DisplayComponentNameNewInputField(this.id)"
                                        };
                                    }
                                    else
                                    {
                                        attributes = new
                                        {
                                            @class = "dropDownKD field-width",
                                            @disabled = "disabled",
                                            @style = "width: 250px; color: #6B6B6B;",
                                            @onChange = "javascript: DisplayComponentNameNewInputField(this.id)"
                                        };
                                    }

                                    @Html.DropDownListFor(m => m.Dependencies[i].KnownDependenciesId, knownDependenciesList, "", attributes);
                                    @Html.ValidationMessageFor(m => m.Dependencies[i].KnownDependenciesId)
                                    <div id="divNewKnownDependency_@(i)" class="new-known-dependency-container">
                                        <div class="pure-control-group new-known-dependency">
                                            @*<input class="pure-form valid field-width" id="Dependencies_@(i)__KnownDependency_ComponentName" name="Dependencies[@(i)].KnownDependency.ComponentName" type="text">*@
                                            @Html.TextBoxFor(m => m.Dependencies[i].KnownDependency.ComponentName, new { @class = "pure-form valid field-width" })
                                            <button class="return-to-dropdown" type="button" id="@(i)" onclick="returnToDropdownFromKDInput(this.id)" title="Return to dropdown" style="background-color: white; border: none;"><i class="fa fa-arrow-left"></i></button>
                                        </div>
                                        @Html.ValidationMessageFor(m => m.Dependencies[i].KnownDependency.ComponentName)
                                    </div>
                                    // write conditionals to check if its a valid guid, if it's a valid guid then display the dropdown, if not then display the input
                                    if (Model.Dependencies[i].KnownDependenciesId == Guid.Empty && Model.Dependencies[i].KnownDependency.ComponentName != "")
                                    {
                                        <script>DisplayComponentNameNewInputFieldOnLoad("@(i)")</script>
                                    }
                                }

                            <th class="pure-control-group">
                                @Html.TextBoxFor(m => m.Dependencies[i].VersionInUse)
                                @Html.ValidationMessageFor(m => m.Dependencies[i].VersionInUse)
                            </th>
                            <th class="pure-control-group">
                                @{
                                    var dependencyId = "Dependencies_" + i + "__.DateUpdated";
                                    if (Model.Dependencies[i].DateUpdated != null)
                                    {
                                        var dateValue = Model.Dependencies[i].DateUpdated.ToString().Split('/');
                                        var formattedDate = dateValue[2].Substring(0, 4) + "-" + (dateValue[0].Length == 1 ? "0" + dateValue[0] : dateValue[0]) + "-" + (dateValue[1].Length == 1 ? "0" + dateValue[1] : dateValue[1]);
                                        <input class="form-control" type="date" id="@dependencyId" name="Dependencies[@i].DateUpdated" value="@formattedDate" />
                                    }
                                    else
                                    {
                                        <input class="form-control" type="date" id="@dependencyId" name="Dependencies[@i].DateUpdated" />
                                    }
                                }

                                @Html.ValidationMessageFor(m => m.Dependencies[i].DateUpdated)
                            </th>
                            <th>
                                <button type="button" onclick="removeDependency(this.id);" id=" DependenciesBtn_@i" title="Remove Dependency" class="rem-btn"><i class="fa fa-minus-circle"></i></button>
                            </th>
                            <th class="pure-control-group hidden">
                                @Html.HiddenFor(m => m.Dependencies[i].Id);
                                @Html.HiddenFor(m => m.Dependencies[i].RepositoryId);
                                @Html.HiddenFor(m => m.Dependencies[i].KnownDependenciesId);
                            </th>
                        </tr>
                    }
                }
            </table>
        </fieldset>
        <div class="pure-control-group">
            <button type="button" onclick="createDependency(@(Model.Dependencies != null? Model.Dependencies.Count: 0));" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> @Resources.Dependencies_Add </button>
        </div>

        <div class="pure-controls">
            <a class="pure-button" href="@Url.Action("Index")"><i class="fa fa-long-arrow-left"></i> @Resources.Repository_Back</a>
            <button type="submit" class="pure-button pure-button-primary"><i class="fa fa-save"></i> @Resources.Repository_Create_Submit</button>
        </div>
    </fieldset>
    <script src="~/scripts/ServiceAccountsEdit.js" asp-append-version="true"></script>
    <script src="~/scripts/DependenciesEdit.js" asp-append-version="true"></script>
}
