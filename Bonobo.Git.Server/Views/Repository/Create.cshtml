@using Bonobo.Git.Server.Extensions
@using MvcCheckBoxList.Model
@model Bonobo.Git.Server.Models.RepositoryDetailModel
@{
    ViewBag.Title = Resources.Repository_Create_Title;
}
<h1>@Resources.Repository_Create_Title</h1>

@using (Html.BeginForm("Create", "Repository", FormMethod.Post, new { @class = "pure-form pure-form-aligned", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false, Resources.Repository_Create_Fail)

    <fieldset>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, new { autofocus = "" })<em>*</em>
            @Html.ValidationMessageFor(m => m.Name)
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Group)
            @Html.TextBoxFor(m => m.Group, new { @class = "medium" })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Description)
            @Html.TextAreaFor(m => m.Description, new { @class = "medium" })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.Logo.PostedFile)
            <input type="file" name="Logo.PostedFile" id="Logo_PostedFile" />
            <sup>.png, .jpg, .jpeg, .gif</sup>
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.AllowAnonymous)
            @Html.CheckBoxFor(m => m.AllowAnonymous, new { @onClick = "document.getElementById('AllowAnonymousPush').disabled = !this.checked" })
            <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousHint"></i>
        </div>

        <div class="pure-control-group">
            @Html.LabelFor(m => m.AllowAnonymousPush)
            @{
                object attribs = new { @id = "AllowAnonymousPush" };
                if (!Model.AllowAnonymous)
                {
                    attribs = new { @id = "AllowAnonymousPush", @disabled = "" };
                }
            }
            @Html.EnumDropDownListFor(m => m.AllowAnonymousPush, attribs)
            <i class="fa fa-info-circle" title="@Resources.Repository_AllowAnonymousPushHint"></i>
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUseGlobal)
            @Html.CheckBoxFor(m => m.LinksUseGlobal, new { @onClick = "document.getElementById('LinksRegex').disabled = this.checked; document.getElementById('LinksUrl').disabled = this.checked" })
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksRegex)
            @{
                attribs = new { @class = "medium" };
                if (Model.LinksUseGlobal)
                {
                    attribs = new { @class = "medium", disabled = "" };
                }
                @Html.TextBoxFor(m => m.LinksRegex, attribs);
                @Html.ValidationMessageFor(m => m.LinksRegex);
            }
        </div>
        <div class="pure-control-group">
            @Html.LabelFor(m => m.LinksUrl)
            @Html.TextBoxFor(m => m.LinksUrl, attribs)
            <i class="fa fa-info-circle" title="@Resources.Settings_Global_LinksUrl_Hint"></i>
        </div>
        <div class="pure-control-group checkboxlist">
            @Html.LabelFor(m => m.Users)
            <span>
                @Html.CheckBoxListFor(m => m.PostedSelectedUsers, mm => mm.AllUsers, mm => mm.Id, mm => mm.DisplayName, mm => mm.Users, Position.Vertical)
            </span>
            <i class="fa fa-info-circle" title="@Resources.Repository_UsersHint"></i>
        </div>

        <div class="pure-control-group checkboxlist">
            @Html.LabelFor(m => m.Administrators)
            <span>
                @Html.CheckBoxListFor(m => m.PostedSelectedAdministrators, mm => mm.AllAdministrators, mm => mm.Id, mm => mm.DisplayName, mm => mm.Administrators, Position.Vertical)
            </span>
            @Html.ValidationMessageFor(m => m.Administrators)
            <i class="fa fa-info-circle" title="@Resources.Repository_AdministratorsHint"></i>
        </div>

        <div class="pure-control-group checkboxlist">
            @Html.LabelFor(m => m.Teams)
            <span>
                @Html.CheckBoxListFor(m => m.PostedSelectedTeams, mm => mm.AllTeams, mm => mm.Id, mm => mm.DisplayName, mm => mm.Teams, Position.Vertical)
            </span>
            <i class="fa fa-info-circle" title="@Resources.Repository_TeamsHint"></i>
        </div>

    <fieldset class="pure-control-group">
        <legend>
            @Resources.SA
        </legend>
        <table class="pure-table" id="service-account-table">
            <tr class="row">
                <th class="col">@Resources.SA_Name</th>
                <th class="col">@Resources.SA_InPassManager</th>
                <th class="col">@Resources.SA_PassLastUpdated</th>
            </tr>
        </table>
</fieldset>
    <div class="pure-control-group">
        <button type="button" onclick=" newField();" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> @Resources.SA_Add </button>
    </div>
    <fieldset class="pure-control-group" style="padding-top:10px;">
        <legend>
            @Resources.Dependencies
        </legend>

        <template id="Dependencyrow">
            <div class="row Dependencies-details" id="Dependencies_{i}" name="Dependencies-details">
                <div class=" col pure-control-group" style="display:none;">
                    <label> @Resources.Dependencies_ID </label>
                    <input class="form-control" id="Dependencies[{i}].Id" name="Dependencies[{i}].Id" readonly disabled />
                </div>
                <div class="pure-control-group">
                    <label for="Dependencies_{i}__KnownDependency_ComponentName">ComponentName</label>
                    <div style="display:none;"> <input id="Dependencies_{i}__KnownDependency_ComponentName" name="Dependencies[{i}].KnownDependency.ComponentName" type="text"></div>
                    <span class="field-validation-valid" data-valmsg-for="Dependencies[{i}].KnownDependency.ComponentName" data-valmsg-replace="true"></span>
                    <select class="dropDownKD valid" data-val="true" data-val-required="The KnownDependenciesId field is required." id="Dependencies_{i}__KnownDependenciesId" name="Dependencies[{i}].KnownDependenciesId" onchange="javascript: DisplayComponentNameNewInputField(this.options[this.selectedIndex].text, this.id)" style="width: 206.944px" aria-required="true" aria-invalid="false">
                        @{
                            var itemsTemplate = (IEnumerable<SelectListItem>)Html.ViewBag.KnownDependencies;
                            <option></option>
                            foreach (var kd in itemsTemplate)
                            {
                                <option value="@kd.Value">@kd.Text</option>
                            }
                        }
                    </select>
                    <button type="button" onclick="DepenremField(this.id);" id=" DependenciesBtn_{i}" title="Remove Dependency" style="background-color: white; border: none;"><i style="color:red;" class="fa fa-minus-circle"></i></button>
                </div>
                <div class="pure-control-group" id="newKD-Dependencies_{i}__KnownDependenciesId" style="display: none;">
                    <label class="pure-form-aligned pure-control-group"></label>
                    <input class="pure-form valid" id="KDInputDependencies_{i}__KnownDependenciesId" type="text">
                    <button type="button" id="{i}" onclick="checkIfKDExists(this.id)" title="Add Component Name" style="background-color: white; border: none;"><i style="color:green;" class="fa fa-plus-circle"></i></button>
                </div>
                <div class="col pure-control-group">
                    <label> @Resources.Dependencies_VersionInUse </label>
                    <input class="form-control" id="Dependencies_{i}__.VersionInUse" name="Dependencies[{i}].VersionInUse" />
                    <span class="field-validation-valid text-danger"
                          data-valmsg-for="Dependencies[{i}].VersionInUse"
                          data-valmsg-replace="true">
                    </span>

                </div>
                <div class="col pure-control-group">
                    <label> @Resources.Dependencies_DateUpdated </label>
                    <input class="form-control" type="date" id="Dependencies_{i}__.DateUpdated" name="Dependencies[{i}].DateUpdated"  value="1900-01-01" />
                    <span class="field-validation-valid text-danger"
                          data-valmsg-for="Dependencies[{i}].DateUpdated"
                          data-valmsg-replace="true">
                    </span>
                </div>
            </div>
        </template>
        </fieldset>
        <div class="pure-control-group">
            <button type="button" onclick="DepennewField(0);" class="pure-button pure-button-primary"> <i class="fa fa-plus-circle"></i> @Resources.Dependencies_Add </button>
        </div>
       
        <div class="pure-controls">
            <a class="pure-button" href="@Url.Action("Index")"><i class="fa fa-long-arrow-left"></i> @Resources.Repository_Back</a>
            <button type="submit" class="pure-button pure-button-primary"><i class="fa fa-save"></i> @Resources.Repository_Create_Submit</button>
        </div>
    </fieldset>
<script src="~/scripts/ServiceAccountsEdit.js" asp-append-version="true"></script>
<script src="~/scripts/DependenciesEdit.js" asp-append-version="true"></script>
<script>
function DisplayComponentNameNewInputField(text, index) {
    if (text == "Add New...") {
        $("#newKD-" + index).css("display", "inline-block");
    } else {
        $("#newKD-" + index).css("display", "none");
    }
}
function checkIfKDExists(i) {
    var inputTemplate = document.getElementById("KDInputDependencies_" + i + "__KnownDependenciesId");
    var newKDName = inputTemplate.value;
    var dropDown = document.getElementById(`Dependencies_${i}__KnownDependenciesId`);
    var exists = 0;
    for (j = 0; j < dropDown.options.length; j++) {
        if (newKDName == dropDown.options[j].text) {
            exists = 1;
            break;
        }
    }
    if (newKDName == "") {
        alert("Please input a value, the new component name cannot be blank");
    } else if (exists == 1) {
        alert("The component name entered already exists");
    } else {
        addKDtoDropDown(i, newKDName, dropDown);
    }
}
function addKDtoDropDown(i, newKDName, dropDown) {
    $.ajax({
        type: "GET",
        contentType: "application/json; charset=utf-8",
        url: `@Url.Action("GenerateNewGuid", "Repository")`,
        data: { "componentName": newKDName },
        success: function (response) {
            var option = document.createElement("option");
            option.text = newKDName;
            option.value = response;
            option.selected = true;
            dropDown.add(option);

            var index = `Dependencies_${i}__KnownDependenciesId`;
            $("#newKD-" + index).css("display", "none");
        },
        failure: function (response) {
            alert("Failed to add new component name");
        }
    });
    return false;
}
</script>
}
